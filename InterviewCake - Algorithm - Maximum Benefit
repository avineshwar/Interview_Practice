- O(N) - time complexity
- O(1) - space complexity

// We have a list of previous day's stock prices of, say, Apple, and using that
// list we intend to maximize our profit, i.e. refer to the list to calculate 
// the maximum profit possible.

// The basic idea is to buy a stock at some price (given in the list) and then
// later sell it a point where maximum profit can be gained.

// Assume that the list which has the stock prices is an array. Now, indices of
// that array is to be taken as a time. So, because, we buy first and sell
// later, index of the stock price for selling will be higher than that of when
// we will be buying a stock.

// indices ->           0   1   2   3   4   5    6   7    8   9  10
// SampleStockPrice = [23, 34, 12, 55, 45, 66, 233, 23, 666, 87, 11]

// So, from this array, if we choose to buy that price 12 USD (index 2), valid
// indices are only 3 and so forth. 2 and below isn't applicable/valid, as the
// index denotes time (we cannot go time, w.r.t. this question).

// A valid choice may not be the correct choice. It has to be so that maximum
// return can be gained.


Algorithm:

Maximum_Benefit(stockPricesArray) {
    
    unless stockPricesArray.numberOfElements >= 2 // store element count
        exit
        
    profit = 0 // we would want to ideally avoid giving any bad suggestions, so, 0 stays as the minimum
    markedValue = 0 // helps in finding the correct profit
    initialized = 0 // if 1, means markedValue has been initialized at least once from the default (which is 0)
    
    stockPricesArray.iterate {
    
        if stockPricesArray[currentElement] < stockPricesArray[currentElement+1]
    
            if currentElement == 0 || stockPricesArray[currentElement] <= markedValue || initialized == 0
                markedValue = stockPricesArray[currentElement]
                initialized = 1
                
            if profit < stockPricesArray[currentElement+1]-markedValue
                profit = stockPricesArray[currentElement+1]-markedValue
    }
    return profit // from the below given sample inputs, the final value is return i.e. "2" from  "1, 2" and so on..
}


Sample inputs:
            1M, 2, 3 -> Profits change like this: 1, 2 :)
            4, 1M, 3 -> Profits change like this: 2:)
            1M, 2, 3, 1 -> Profits change like this: 1, 2 :)
            1M, 2, 2, 4, 1M, 5 -> Profits change like this: 1, 3, 4 :)
            0M, 3, 1, 4 -> Profits change like this: 3, 4 :)
            2, 1M, 3, 4, 4, 0M, 10, 2, 3, 1, 4, 4, 4, 3, 3, 1, 0 -> Profits change like this: 2, 3, 10 :)
